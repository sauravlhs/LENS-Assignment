name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
      
      - name: Install Jest Globally
        run: npm install -g jest


      - name: Run Tests
        run: jest --passWithNoTests  # installing jest expilictally.

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/lensassignment:latest . || echo "Docker build failed"


      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/lensassignment:latest || echo "Docker push failed"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Azure AKS Set up
        uses: azure/aks-set-context@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

   #   - name: Deploy to AKS
    #    run: |
     #     kubectl create secret docker-registry acr-secret \
      #    --docker-password=${{ secrets.AZURE_ACR_PASSWORD }} \
       #     --namespace default

          # Apply Kubernetes configurations
#          kubectl apply -f k8s/deployment.yml
 #         kubectl apply -f k8s/service.yml  dummy

      - name: Set up Horizontal Pod Autoscaler
        run: |
          kubectl autoscale deployment lensassignment-deployment --cpu-percent=70 --min=1 --max=5


      # Notify on Success
      - name: Slack Notification - Success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":" Build and deployment succeeded!"}' $SLACK_WEBHOOK_URL

      # Notify on Failure
      - name: Slack Notification - Failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":" Build or deployment failed!"}' $SLACK_WEBHOOK_URL

  
